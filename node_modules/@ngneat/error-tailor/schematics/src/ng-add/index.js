"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const tasks_1 = require("@angular-devkit/schematics/tasks");
const schematics_utilities_1 = require("schematics-utilities");
const ts = require("typescript");
const utils_1 = require("./utils");
function addPackageJsonDependencies(options) {
    return (host, context) => {
        const dependencies = [
            {
                type: schematics_utilities_1.NodeDependencyType.Default,
                name: '@ngneat/error-tailor',
                version: '1.0.0'
            }
        ];
        dependencies.forEach(dependency => {
            schematics_utilities_1.addPackageJsonDependency(host, dependency);
            context.logger.log('info', `‚úÖÔ∏è Added "${dependency.name}" into ${dependency.type}`);
        });
        return host;
    };
}
function installPackageJsonDependencies() {
    return (host, context) => {
        context.addTask(new tasks_1.NodePackageInstallTask());
        context.logger.log('info', `üîç Installing package...`);
        return host;
    };
}
function getTsSourceFile(host, path) {
    const buffer = host.read(path);
    if (!buffer) {
        throw new schematics_1.SchematicsException(`Could not read file (${path}).`);
    }
    const content = buffer.toString();
    const source = ts.createSourceFile(path, content, ts.ScriptTarget.Latest, true);
    return source;
}
function injectImports(options) {
    return (host, context) => {
        const workspace = schematics_utilities_1.getWorkspace(host);
        const project = schematics_utilities_1.getProjectFromWorkspace(workspace, Object.keys(workspace.projects)[0]);
        const modulePath = schematics_utilities_1.getAppModulePath(host, project.architect.build.options.main);
        const moduleSource = getTsSourceFile(host, modulePath);
        const change = utils_1.insertImport(moduleSource, modulePath, 'ErrorTailorModule', '@ngneat/error-tailor');
        if (change) {
            const recorder = host.beginUpdate(modulePath);
            recorder.insertLeft(change.pos, change.toAdd);
            host.commitUpdate(recorder);
        }
        return host;
    };
}
function addModuleToImports(options) {
    return (host, context) => {
        const workspace = schematics_utilities_1.getWorkspace(host);
        const project = schematics_utilities_1.getProjectFromWorkspace(workspace, Object.keys(workspace.projects)[0]);
        const moduleImport = `ErrorTailorModule.forRoot({
      errors: {
        useValue: {
          required: error => 'This field is required'
        }
      }
    })`;
        schematics_utilities_1.addModuleImportToRootModule(host, moduleImport, null, project);
        context.logger.log('info', `üåà @ngneat/error-tailor is imported`);
        return host;
    };
}
function log() {
    return (host, context) => {
        context.logger.log('info', `üëè @ngneat/error-tailor ready to use`);
        return host;
    };
}
function errorTailorNgAdd(options) {
    return schematics_1.chain([
        addPackageJsonDependencies(options),
        installPackageJsonDependencies(),
        addModuleToImports(options),
        injectImports(options),
        log()
    ]);
}
exports.default = errorTailorNgAdd;
//# sourceMappingURL=index.js.map