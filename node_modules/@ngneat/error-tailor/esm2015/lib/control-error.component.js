import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, TemplateRef } from '@angular/core';
let DefaultControlErrorComponent = class DefaultControlErrorComponent {
    constructor(cdr, host) {
        this.cdr = cdr;
        this.host = host;
        this.errorText = null;
        this.hideError = true;
    }
    createTemplate(tpl, error, text) {
        this.errorTemplate = tpl;
        this.errorContext = { $implicit: error, text };
        this.cdr.markForCheck();
    }
    set customClass(className) {
        this.host.nativeElement.classList.add(className);
    }
    set text(value) {
        if (value !== this.errorText) {
            this.errorText = value;
            this.hideError = !value;
            this.cdr.markForCheck();
        }
    }
};
DefaultControlErrorComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
DefaultControlErrorComponent = __decorate([
    Component({
        selector: 'control-error',
        template: `
    <label class="control-error" [class.hide-control]="hideError" *ngIf="!errorTemplate">{{ errorText }}</label>
    <ng-template *ngTemplateOutlet="errorTemplate; context: errorContext"></ng-template>
  `,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: [`
      .hide-control {
        display: none !important;
      }

      :host {
        display: block;
      }
    `]
    })
], DefaultControlErrorComponent);
export { DefaultControlErrorComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1lcnJvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmduZWF0L2Vycm9yLXRhaWxvci8iLCJzb3VyY2VzIjpbImxpYi9jb250cm9sLWVycm9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBOEIvRyxJQUFhLDRCQUE0QixHQUF6QyxNQUFhLDRCQUE0QjtJQXdCdkMsWUFBb0IsR0FBc0IsRUFBVSxJQUE2QjtRQUE3RCxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQUFVLFNBQUksR0FBSixJQUFJLENBQXlCO1FBdkJqRixjQUFTLEdBQWtCLElBQUksQ0FBQztRQUdoQyxjQUFTLEdBQUcsSUFBSSxDQUFDO0lBb0JtRSxDQUFDO0lBbEJyRixjQUFjLENBQUMsR0FBMkIsRUFBRSxLQUF1QixFQUFFLElBQVk7UUFDL0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUM7UUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsU0FBaUI7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxJQUFJLENBQUMsS0FBb0I7UUFDM0IsSUFBSSxLQUFLLEtBQUssSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsS0FBSyxDQUFDO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDekI7SUFDSCxDQUFDO0NBR0YsQ0FBQTs7WUFEMEIsaUJBQWlCO1lBQWdCLFVBQVU7O0FBeEJ6RCw0QkFBNEI7SUFuQnhDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxlQUFlO1FBQ3pCLFFBQVEsRUFBRTs7O0dBR1Q7UUFDRCxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFFN0M7Ozs7Ozs7O0tBUUM7S0FFSixDQUFDO0dBQ1csNEJBQTRCLENBeUJ4QztTQXpCWSw0QkFBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgVGVtcGxhdGVSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCB0eXBlIEVycm9yQ29tcG9uZW50VGVtcGxhdGUgPSBUZW1wbGF0ZVJlZjx7ICRpbXBsaWNpdDogVmFsaWRhdGlvbkVycm9yczsgdGV4dDogc3RyaW5nIH0+O1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbnRyb2xFcnJvckNvbXBvbmVudCB7XG4gIGN1c3RvbUNsYXNzOiBzdHJpbmc7XG4gIHRleHQ6IHN0cmluZyB8IG51bGw7XG4gIGNyZWF0ZVRlbXBsYXRlPyh0cGw6IEVycm9yQ29tcG9uZW50VGVtcGxhdGUsIGVycm9yOiBWYWxpZGF0aW9uRXJyb3JzLCB0ZXh0OiBzdHJpbmcpOiB2b2lkO1xufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjb250cm9sLWVycm9yJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bGFiZWwgY2xhc3M9XCJjb250cm9sLWVycm9yXCIgW2NsYXNzLmhpZGUtY29udHJvbF09XCJoaWRlRXJyb3JcIiAqbmdJZj1cIiFlcnJvclRlbXBsYXRlXCI+e3sgZXJyb3JUZXh0IH19PC9sYWJlbD5cbiAgICA8bmctdGVtcGxhdGUgKm5nVGVtcGxhdGVPdXRsZXQ9XCJlcnJvclRlbXBsYXRlOyBjb250ZXh0OiBlcnJvckNvbnRleHRcIj48L25nLXRlbXBsYXRlPlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgc3R5bGVzOiBbXG4gICAgYFxuICAgICAgLmhpZGUtY29udHJvbCB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbiAgICAgIH1cblxuICAgICAgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICBgXG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbnRyb2xFcnJvckNvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xFcnJvckNvbXBvbmVudCB7XG4gIGVycm9yVGV4dDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XG4gIGVycm9yVGVtcGxhdGU6IEVycm9yQ29tcG9uZW50VGVtcGxhdGUgfCB1bmRlZmluZWQ7XG4gIGVycm9yQ29udGV4dDogeyAkaW1wbGljaXQ6IFZhbGlkYXRpb25FcnJvcnM7IHRleHQ6IHN0cmluZyB9O1xuICBoaWRlRXJyb3IgPSB0cnVlO1xuXG4gIGNyZWF0ZVRlbXBsYXRlKHRwbDogRXJyb3JDb21wb25lbnRUZW1wbGF0ZSwgZXJyb3I6IFZhbGlkYXRpb25FcnJvcnMsIHRleHQ6IHN0cmluZykge1xuICAgIHRoaXMuZXJyb3JUZW1wbGF0ZSA9IHRwbDtcbiAgICB0aGlzLmVycm9yQ29udGV4dCA9IHsgJGltcGxpY2l0OiBlcnJvciwgdGV4dCB9O1xuICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgc2V0IGN1c3RvbUNsYXNzKGNsYXNzTmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5ob3N0Lm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9XG5cbiAgc2V0IHRleHQodmFsdWU6IHN0cmluZyB8IG51bGwpIHtcbiAgICBpZiAodmFsdWUgIT09IHRoaXMuZXJyb3JUZXh0KSB7XG4gICAgICB0aGlzLmVycm9yVGV4dCA9IHZhbHVlO1xuICAgICAgdGhpcy5oaWRlRXJyb3IgPSAhdmFsdWU7XG4gICAgICB0aGlzLmNkci5tYXJrRm9yQ2hlY2soKTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsIHByaXZhdGUgaG9zdDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4pIHt9XG59XG4iXX0=