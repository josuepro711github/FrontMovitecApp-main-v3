import { __assign, __decorate, __param, __read } from "tslib";
import { ComponentFactoryResolver, ComponentRef, Directive, ElementRef, Inject, Input, OnDestroy, OnInit, Optional, Self, TemplateRef, ViewContainerRef, EmbeddedViewRef } from '@angular/core';
import { AbstractControl, ControlContainer, NgControl, ValidationErrors } from '@angular/forms';
import { DefaultControlErrorComponent } from './control-error.component';
import { ControlErrorAnchorDirective } from './control-error-anchor.directive';
import { EMPTY, fromEvent, merge, NEVER, Subject } from 'rxjs';
import { ErrorTailorConfigProvider, FORM_ERRORS } from './providers';
import { distinctUntilChanged, mapTo, startWith, switchMap, takeUntil } from 'rxjs/operators';
import { FormActionDirective } from './form-action.directive';
var ControlErrorsDirective = /** @class */ (function () {
    function ControlErrorsDirective(vcr, resolver, host, config, globalErrors, controlErrorAnchorParent, form, ngControl, controlContainer) {
        this.vcr = vcr;
        this.resolver = resolver;
        this.host = host;
        this.config = config;
        this.globalErrors = globalErrors;
        this.controlErrorAnchorParent = controlErrorAnchorParent;
        this.form = form;
        this.ngControl = ngControl;
        this.controlContainer = controlContainer;
        this.customErrors = {};
        this.controlErrorsOnAsync = true;
        this.controlErrorsOnBlur = true;
        this.destroy = new Subject();
        this.mergedConfig = {};
        this.submit$ = this.form ? this.form.submit$ : EMPTY;
        this.reset$ = this.form ? this.form.reset$ : EMPTY;
        this.mergedConfig = this.buildConfig();
    }
    ControlErrorsDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.anchor = this.resolveAnchor();
        this.control = (this.controlContainer || this.ngControl).control;
        var hasAsyncValidator = !!this.control.asyncValidator;
        var isInput = this.mergedConfig.blurPredicate(this.host.nativeElement);
        var statusChanges$ = this.control.statusChanges.pipe(distinctUntilChanged());
        var valueChanges$ = this.control.valueChanges;
        var controlChanges$ = merge(statusChanges$, valueChanges$);
        var changesOnAsync$ = EMPTY;
        var changesOnBlur$ = EMPTY;
        if (this.controlErrorsOnAsync && hasAsyncValidator) {
            // hasAsyncThenUponStatusChange
            changesOnAsync$ = statusChanges$.pipe(startWith(true));
        }
        if (this.controlErrorsOnBlur && isInput) {
            var blur$ = fromEvent(this.host.nativeElement, 'focusout');
            // blurFirstThenUponChange
            changesOnBlur$ = blur$.pipe(switchMap(function () { return valueChanges$.pipe(startWith(true)); }));
        }
        var submit$ = merge(this.submit$.pipe(mapTo(true)), this.reset$.pipe(mapTo(false)));
        // when submitted, submitFirstThenUponChanges
        var changesOnSubmit$ = submit$.pipe(switchMap(function (submit) { return (submit ? controlChanges$.pipe(startWith(true)) : NEVER); }));
        // on reset, clear ComponentRef and customAnchorDestroyFn
        this.reset$.pipe(takeUntil(this.destroy)).subscribe(function () { return _this.clearRefs(); });
        merge(changesOnAsync$, changesOnBlur$, changesOnSubmit$)
            .pipe(takeUntil(this.destroy))
            .subscribe(function () { return _this.valueChanges(); });
    };
    ControlErrorsDirective.prototype.setError = function (text, error) {
        if (!this.ref) {
            var factory = this.resolver.resolveComponentFactory(this.mergedConfig.controlErrorComponent);
            this.ref = this.anchor.createComponent(factory);
        }
        var instance = this.ref.instance;
        if (this.controlErrorsTpl) {
            instance.createTemplate(this.controlErrorsTpl, error, text);
        }
        else {
            instance.text = text;
        }
        if (this.controlErrorsClass) {
            instance.customClass = this.controlErrorsClass;
        }
        if (this.mergedConfig.controlErrorComponentAnchorFn) {
            this.customAnchorDestroyFn = this.mergedConfig.controlErrorComponentAnchorFn(this.host.nativeElement, this.ref.hostView.rootNodes[0]);
        }
    };
    ControlErrorsDirective.prototype.ngOnDestroy = function () {
        this.destroy.next();
        this.clearRefs();
    };
    ControlErrorsDirective.prototype.clearRefs = function () {
        if (this.customAnchorDestroyFn) {
            this.customAnchorDestroyFn();
            this.customAnchorDestroyFn = null;
        }
        if (this.ref) {
            this.ref.destroy();
        }
        this.ref = null;
    };
    ControlErrorsDirective.prototype.valueChanges = function () {
        var controlErrors = this.control.errors;
        if (controlErrors) {
            var _a = __read(Object.keys(controlErrors), 1), firstKey = _a[0];
            var getError = this.customErrors[firstKey] || this.globalErrors[firstKey];
            if (!getError) {
                return;
            }
            var text = typeof getError === 'function' ? getError(controlErrors[firstKey]) : getError;
            this.setError(text, controlErrors);
        }
        else if (this.ref) {
            this.setError(null);
        }
    };
    ControlErrorsDirective.prototype.resolveAnchor = function () {
        if (this.controlErrorAnchor) {
            return this.controlErrorAnchor.vcr;
        }
        if (this.controlErrorAnchorParent) {
            return this.controlErrorAnchorParent.vcr;
        }
        return this.vcr;
    };
    ControlErrorsDirective.prototype.buildConfig = function () {
        return __assign({
            blurPredicate: function (element) {
                return element.tagName === 'INPUT' || element.tagName === 'SELECT';
            },
            controlErrorComponent: DefaultControlErrorComponent
        }, this.config);
    };
    ControlErrorsDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [ErrorTailorConfigProvider,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [FORM_ERRORS,] }] },
        { type: ControlErrorAnchorDirective, decorators: [{ type: Optional }] },
        { type: FormActionDirective, decorators: [{ type: Optional }] },
        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
        { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    __decorate([
        Input('controlErrors')
    ], ControlErrorsDirective.prototype, "customErrors", void 0);
    __decorate([
        Input()
    ], ControlErrorsDirective.prototype, "controlErrorsClass", void 0);
    __decorate([
        Input()
    ], ControlErrorsDirective.prototype, "controlErrorsTpl", void 0);
    __decorate([
        Input()
    ], ControlErrorsDirective.prototype, "controlErrorsOnAsync", void 0);
    __decorate([
        Input()
    ], ControlErrorsDirective.prototype, "controlErrorsOnBlur", void 0);
    __decorate([
        Input()
    ], ControlErrorsDirective.prototype, "controlErrorAnchor", void 0);
    ControlErrorsDirective = __decorate([
        Directive({
            selector: '[formControlName]:not([controlErrorsIgnore]), [formControl]:not([controlErrorsIgnore]), [formGroup]:not([controlErrorsIgnore]), [formGroupName]:not([controlErrorsIgnore]), [formArrayName]:not([controlErrorsIgnore]), [ngModel]:not([controlErrorsIgnore])'
        }),
        __param(3, Inject(ErrorTailorConfigProvider)),
        __param(4, Inject(FORM_ERRORS)),
        __param(5, Optional()),
        __param(6, Optional()),
        __param(7, Optional()), __param(7, Self()),
        __param(8, Optional()), __param(8, Self())
    ], ControlErrorsDirective);
    return ControlErrorsDirective;
}());
export { ControlErrorsDirective };
//# sourceMappingURL=data:application/json;base64,